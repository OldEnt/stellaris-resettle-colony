namespace = resettlecol
# Menu event.
planet_event = {
	id = resettlecol.10
	title = resettlecol.10.name
	desc = resettlecol.10.desc
	picture = GFX_evt_big_landing_ship
	location = this
	is_triggered_only = yes
	option = {
		name = resettlecol_all.10
		custom_tooltip = resettlecol_all.10_desc
		allow = {
			NOR = {
				has_orbital_bombardment = yes				# Cannot resettle out of colonies under siege.
				is_occupied_flag = yes				# Cannot resettle out of occupied colonies.
				has_planet_flag = resettlecol_out_disabled				# Excludes planet as a valid Resettle Colony decision origin.
			}
			owner = {
				num_owned_planets > 1
				any_owned_planet = {
					NOR = {
						is_same_value = prevprev						# Target cannot be the same as origin.
						is_under_colonization = yes						# Cannot resettle to worlds under colonisation.
						has_orbital_bombardment = yes						# Cannot resettle to colonies under siege.
						is_occupied_flag = yes						# Cannot resettle to occupied colonies.
						has_planet_flag = resettlecol_in_disabled						# Excludes planet as a valid Resettle Colony decision target.
					}
				}
			}
		}
		hidden_effect = {
			planet_event = {
				id = resettlecol.11				# Main resettle event.
				days = 0
			}
		}
	}
	option = {
		name = resettlecol_no.10
	}
}

# Main resettle event.
planet_event = {
	id = resettlecol.11
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		change_variable = {
			which = resettlecol_decision_out_num			# Debug: Count number of resettlement decisions issued.
			value = 1
		}
		every_owned_pop = {
			prev = {
				change_variable = {
					which = resettlecol_pops_out_num					# Debug: Count number of pops resettled out.
					value = 1
				}
				change_variable = {
					which = resettlecol_pops_balance					# Debug: Count pops resettled balance.
					value = -1
				}
			}
		}
		owner = {
			save_event_target_as = resettlecol_country			# Save owner of the origin planet for later use.
			every_owned_planet = {
				set_variable = {
					which = resettlecol_equalise_blocker					# Reset equal pop distribution blocker.
					value = 0
				}
			}
		}
		# enslaved
		planet_event = {
			id = resettlecol.12			# Resettle lowest strata.
			days = 1
		}
		# worker
		planet_event = {
			id = resettlecol.13			# Resettle workers.
			days = 2
		}
		# specialist
		planet_event = {
			id = resettlecol.14			# Resettle specialists.
			days = 3
		}
		# ruler
		planet_event = {
			id = resettlecol.15			# Resettle rulers.
			days = 4
		}
		# other
		planet_event = {
			id = resettlecol.20			# Resettle remaining pops.
			days = 5
		}
	}
}

# Resettle lowest strata.
planet_event = {
	id = resettlecol.12
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_variable = {
			which = resettlecol_outgoing_num			# Prepare pop counter.
			value = 0
		}
		every_owned_pop = {
			limit = {
				OR = {
					is_pop_category = slave
					# is_enslaved = yes
					is_pop_category = robot_servant
					# has_citizenship_type = {
					# 	type = citizenship_robot_servitude
					# }
					is_pop_category = bio_trophy
					is_pop_category = purge
					is_pop_category = assimilation
					is_pop_category = pre_sapients
				}
			}
			prev = {
				change_variable = {
					which = resettlecol_outgoing_num					# Add to pop counter.
					value = 1
				}
			}
			set_pop_flag = resettlecol_pop@prev			# Mark pop for resettlement.
		}
		while = {
			count = resettlecol_outgoing_num			# Execute resettlement times number of pops marked.
			resettlecol_resettle_effect = yes			# Execute resettlement.
		}
		set_variable = {
			which = resettlecol_outgoing_num			# Prepare pop counter.
			value = 0
		}
		event_target:resettlecol_country = {
			every_owned_planet = {
				set_variable = {
					which = resettlecol_equalise_blocker					# Reset equal pop distribution blocker.
					value = 0
				}
			}
		}
	}
}

# Resettle workers.
planet_event = {
	id = resettlecol.13
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_variable = {
			which = resettlecol_outgoing_num
			value = 0
		}
		every_owned_pop = {
			limit = {
				OR = {
					is_pop_category = worker
					is_pop_category = criminal
					is_pop_category = deviant_drone
					is_pop_category = corrupt_drone
					is_pop_category = simple_drone
					is_pop_category = xeno_ward
				}
			}
			prev = {
				change_variable = {
					which = resettlecol_outgoing_num
					value = 1
				}
			}
			set_pop_flag = resettlecol_pop@prev
		}
		while = {
			count = resettlecol_outgoing_num
			resettlecol_resettle_effect = yes
		}
		set_variable = {
			which = resettlecol_outgoing_num
			value = 0
		}
		event_target:resettlecol_country = {
			every_owned_planet = {
				set_variable = {
					which = resettlecol_equalise_blocker
					value = 0
				}
			}
		}
	}
}

# Resettle specialists.
planet_event = {
	id = resettlecol.14
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_variable = {
			which = resettlecol_outgoing_num
			value = 0
		}
		every_owned_pop = {
			limit = {
				OR = {
					is_pop_category = specialist
					is_pop_category = complex_drone
				}
				is_pop_category = precursor
			}
			prev = {
				change_variable = {
					which = resettlecol_outgoing_num
					value = 1
				}
			}
			set_pop_flag = resettlecol_pop@prev
		}
		while = {
			count = resettlecol_outgoing_num
			resettlecol_resettle_effect = yes
		}
		set_variable = {
			which = resettlecol_outgoing_num
			value = 0
		}
		event_target:resettlecol_country = {
			every_owned_planet = {
				set_variable = {
					which = resettlecol_equalise_blocker
					value = 0
				}
			}
		}
	}
}

# Resettle rulers.
planet_event = {
	id = resettlecol.15
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_variable = {
			which = resettlecol_outgoing_num
			value = 0
		}
		every_owned_pop = {
			limit = {
				is_pop_category = ruler
			}
			prev = {
				change_variable = {
					which = resettlecol_outgoing_num
					value = 1
				}
			}
			set_pop_flag = resettlecol_pop@prev
		}
		while = {
			count = resettlecol_outgoing_num
			resettlecol_resettle_effect = yes
		}
		set_variable = {
			which = resettlecol_outgoing_num
			value = 0
		}
		event_target:resettlecol_country = {
			every_owned_planet = {
				set_variable = {
					which = resettlecol_equalise_blocker
					value = 0
				}
			}
		}
	}
}

# Resettle remaining pops.
planet_event = {
	id = resettlecol.20
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_variable = {
			which = resettlecol_outgoing_num
			value = 0
		}
		every_owned_pop = {
			# limit = {
			# }
			prev = {
				change_variable = {
					which = resettlecol_outgoing_num
					value = 1
				}
			}
			set_pop_flag = resettlecol_pop@prev
		}
		while = {
			count = resettlecol_outgoing_num
			resettlecol_resettle_effect = yes
		}
		set_variable = {
			which = resettlecol_outgoing_num
			value = 0
		}
		event_target:resettlecol_country = {
			every_owned_planet = {
				set_variable = {
					which = resettlecol_equalise_blocker
					value = 0
				}
			}
		}
	}
}

# error.log cleaner, do not use!
event = {
	id = resettlecol.90
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_planet_flag = resettlecol_out_disabled		# Excludes planet as a valid Resettle Colony decision origin.
		set_planet_flag = resettlecol_in_disabled		# Excludes planet as a valid Resettle Colony decision target.
		set_global_flag = resettlecol_disabled		# Resettle Colony decision can be disabled globally with this flag.
		set_country_flag = resettlecol_country_disabled		# Countries with this flag cannot use Resettle Colony decision.
	}
}

# Marks mod as installed for other mods to check.
country_event = {
	id = resettlecol.99
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = {
			has_global_flag = resettlecol_installed
		}
	}
	immediate = {
		set_global_flag = resettlecol_installed
	}
}
